# -*- coding: utf-8 -*-
"""
Created on Mon Jan 31 14:54:49 2022

@author: admin
"""

'''1. Реализовать скрипт, в котором должна быть предусмотрена функция 
расчёта заработной платы сотрудника. Используйте в нём формулу: 
(выработка в часах*ставка в час) + премия.
Во время выполнения расчёта для конкретных значений необходимо запускать 
скрипт с параметрами.'''

import sys

from sys import argv

time, pay, exta = argv
total = (time * pay) + extra

print (f'Total pay is {total}')

#Могли бы объяснить почему предидущий вариант не работает?

def salary():
    time = float(input('Hours worked: : '))
    pay = float(input('Per hour salary : '))
    extra = float(input('Extra - '))
    total = (time * pay) +  extra
    return total
print(f'Total salary : {salary()}')

from sys import argv


'''2. Представлен список чисел. Необходимо вывести элементы исходного списка,
 значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для его формирования используйте генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].'''

import random
rlist = random.sample(range(1, 100), 12)
result = []
for i in range(1,len(rlist)):
    if rlist[i] > rlist[i-1]:
        result.append(rlist[i])
print(result)       
print(rlist)

'''3. Для чисел в пределах от 20 до 240 найти числа, 
кратные 20 или 21. Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор.'''

my_list = [*range(20,250,20)]+[*range(21,240,21)]
print(my_list)

'''4. Представлен список чисел. Определите элементы списка, не имеющие повторений. 
Сформируйте итоговый массив чисел, соответствующих требованию. 
Элементы выведите в порядке их следования в исходном списке. 
Для выполнения задания обязательно используйте генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]'''

a = [i for i in input('Type a list ').split()]
l = []
for i in a:
   if a.count(i) == 1:
       l.append(i)
print(l)



'''5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти чётные числа от 100 до 1000 (включая границы). 
Нужно получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce()'''

from functools import reduce

l = list(range(100,1002,2))
result = reduce((lambda x, y: x * y), l)
print(result)

    
    
'''6. Реализовать два небольших скрипта:
итератор, генерирующий целые числа, начиная с указанного;
итератор, повторяющий элементы некоторого списка, определённого заранее. 
Подсказка: используйте функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Предусмотрите условие его завершения. 
#### Например, в первом задании выводим целые числа, начиная с 3. 
При достижении числа 10 — завершаем цикл. 
Вторым пунктом необходимо предусмотреть условие, 
при котором повторение элементов списка прекратится.'''

from itertools import cycle, count
import random

start = int(input('Start number: '))
stop = start * 2

#1
for i in count(start):
    if i < stop:
        print(i)
    else:
        break

#2
my_list = [i for i in range(stop)]
step = 0
for b in cycle(my_list):
    if step < stop:
        print(b)
        step += 1
    else:
        break

'''7. Реализовать генератор с помощью функции с ключевым словом yield, 
cоздающим очередное значение. При вызове функции должен создаваться объект-генератор. 
Функция вызывается следующим образом: for el in fact(n). 
Она отвечает за получение факториала числа. 
В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырё
х 4! = 1 * 2 * 3 * 4 = 24.'''

from itertools import count
from math import factorial

def fact(el):
    a = 1
    for i in range(1, el + 1):
        a = a * i
        yield a

for el in fact(4):
    print(el)
    

















